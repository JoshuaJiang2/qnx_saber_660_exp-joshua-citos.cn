	
//=============================================================================			
// IOMUX			
//=============================================================================			
//DDR IO TYPE:			
DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE + 0x798, 0x000C0000)		// IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE 
DCD_ENTRY_QUAD(2, MX6X_IOMUXC_BASE + 0x758, 0x00000000)		// IOMUXC_SW_PAD_CTL_GRP_DDRPKE 		
//CLOCK:			
DCD_ENTRY_QUAD(3, MX6X_IOMUXC_BASE + 0x588, 0x00000028)		// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0
DCD_ENTRY_QUAD(4, MX6X_IOMUXC_BASE + 0x594, 0x00000028) 	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1	

//ADDRESS:			
DCD_ENTRY_QUAD(5, MX6X_IOMUXC_BASE + 0x56c, 0x00000028)		// IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS
DCD_ENTRY_QUAD(6, MX6X_IOMUXC_BASE + 0x578, 0x00000028)		// IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS
DCD_ENTRY_QUAD(7, MX6X_IOMUXC_BASE + 0x74c, 0x00000028)		// IOMUXC_SW_PAD_CTL_GRP_ADDDS 

//Control:			
DCD_ENTRY_QUAD(8, MX6X_IOMUXC_BASE + 0x57c, 0x00000028)		// IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET
DCD_ENTRY_QUAD(9, MX6X_IOMUXC_BASE + 0x58c, 0x00000000) 	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 - DSE can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
DCD_ENTRY_QUAD(10, MX6X_IOMUXC_BASE + 0x59c, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0	
DCD_ENTRY_QUAD(11, MX6X_IOMUXC_BASE + 0x5a0, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1
DCD_ENTRY_QUAD(12, MX6X_IOMUXC_BASE + 0x78c, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_CTLDS 

//Data Strobes:			
DCD_ENTRY_QUAD(13, MX6X_IOMUXC_BASE + 0x750, 0x00020000)	// IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL 
DCD_ENTRY_QUAD(14, MX6X_IOMUXC_BASE  + 0x5a8, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 
DCD_ENTRY_QUAD(15, MX6X_IOMUXC_BASE  + 0x5b0, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 
DCD_ENTRY_QUAD(16, MX6X_IOMUXC_BASE  + 0x524, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 	
DCD_ENTRY_QUAD(17, MX6X_IOMUXC_BASE  + 0x51c, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 
//DCD_ENTRY_QUAD(18, MX6X_IOMUXC_BASE  + 0x518, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 
//DCD_ENTRY_QUAD(19, MX6X_IOMUXC_BASE  + 0x50c, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 	
//DCD_ENTRY_QUAD(20, MX6X_IOMUXC_BASE  + 0x5b8, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 
//DCD_ENTRY_QUAD(21, MX6X_IOMUXC_BASE  + 0x5c0, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 
			
//Data:			
DCD_ENTRY_QUAD(19, MX6X_IOMUXC_BASE  + 0x774, 0x00020000)	// IOMUXC_SW_PAD_CTL_GRP_DDRMODE	
DCD_ENTRY_QUAD(20, MX6X_IOMUXC_BASE  + 0x784, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B0DS 
DCD_ENTRY_QUAD(21, MX6X_IOMUXC_BASE  + 0x788, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B1DS 	
DCD_ENTRY_QUAD(22, MX6X_IOMUXC_BASE  + 0x794, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B2DS 
DCD_ENTRY_QUAD(23, MX6X_IOMUXC_BASE  + 0x79c, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B3DS 	
//DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x7a0, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B4DS 	
//DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x7a4, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B5DS 	
//DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x7a8, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B6DS 	
//DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x748, 0x00000028)	// IOMUXC_SW_PAD_CTL_GRP_B7DS 
				
DCD_ENTRY_QUAD(24, MX6X_IOMUXC_BASE  + 0x5ac, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0	
DCD_ENTRY_QUAD(25, MX6X_IOMUXC_BASE  + 0x5b4, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1
DCD_ENTRY_QUAD(26, MX6X_IOMUXC_BASE  + 0x528, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2	
DCD_ENTRY_QUAD(27, MX6X_IOMUXC_BASE  + 0x520, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3
//DCD_ENTRY_QUAD(28, MX6X_IOMUXC_BASE  + 0x514, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4	
//DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x510, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5	
//DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x5bc, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6	
//DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x5c4, 0x00000028)	// IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7
			
			
//=============================================================================			
// DDR Controller Registers			
//=============================================================================			
// Manufacturer:	Micron		
// Device Part Number:	MT41K128M16JT-125		
// Clock Freq.: 	528MHz		
// Density per CS in Gb: 	4		
// Chip Selects used:	1		
// Number of Banks:	8		
// Row address:    	14		
// Column address: 	10		
// Data bus width	32		
//=============================================================================				
DCD_ENTRY_QUAD(28, MX6X_MMDC_P0_BASE + 0x01c, 0x00008000)	//MMDC0_MDSCR, set the Configuration request bit during MMDC set up

//=============================================================================			
// Calibration setup.			
//=============================================================================			
DCD_ENTRY_QUAD(29, MX6X_MMDC_P0_BASE + 0x800, 0xA1390003)	// DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.

// For target board, may need to run write leveling calibration to fine tune these settings.			
DCD_ENTRY_QUAD(29, MX6X_MMDC_P0_BASE + 0x80c, 0x002A002C)
DCD_ENTRY_QUAD(30, MX6X_MMDC_P0_BASE + 0x810, 0x0031002A)	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x80c, 0x00000000)
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x810, 0x00000000)

////Read DQS Gating calibration				
DCD_ENTRY_QUAD(31, MX6X_MMDC_P0_BASE + 0x83c, 0x03440354)	// MPDGCTRL0 PHY0	
DCD_ENTRY_QUAD(32, MX6X_MMDC_P0_BASE + 0x840, 0x03400340)	// MPDGCTRL1 PHY0	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x83c, 0x00000000)	// MPDGCTRL0 PHY1
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x840, 0x00000000)	// MPDGCTRL1 PHY1
			
//Read calibration				
DCD_ENTRY_QUAD(33, MX6X_MMDC_P0_BASE + 0x848, 0x3A36383A)	// MPRDDLCTL PHY0
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x848, 0x40404040)	// MPRDDLCTL PHY1
				
//Write calibration                     			
DCD_ENTRY_QUAD(34, MX6X_MMDC_P0_BASE + 0x850, 0x3E3C403C)	// MPWRDLCTL PHY0
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x850, 0x40404040)	// MPWRDLCTL PHY1
			
//read data bit delay: (3 is the reccommended default value, although out of reset value is 0)				
DCD_ENTRY_QUAD(35, MX6X_MMDC_P0_BASE + 0x81c, 0x33333333)	// DDR_PHY_P0_MPREDQBY0DL3	
DCD_ENTRY_QUAD(36, MX6X_MMDC_P0_BASE + 0x820, 0x33333333)	// DDR_PHY_P0_MPREDQBY1DL3	
DCD_ENTRY_QUAD(37, MX6X_MMDC_P0_BASE + 0x824, 0x33333333)	// DDR_PHY_P0_MPREDQBY2DL3		
DCD_ENTRY_QUAD(38, MX6X_MMDC_P0_BASE + 0x828, 0x33333333)	// DDR_PHY_P0_MPREDQBY3DL3
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x81c, 0x33333333)	// DDR_PHY_P1_MPREDQBY0DL3	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x820, 0x33333333)	// DDR_PHY_P1_MPREDQBY1DL3	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x824, 0x33333333)	// DDR_PHY_P1_MPREDQBY2DL3	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x828, 0x33333333)	// DDR_PHY_P1_MPREDQBY3DL3
			
//For i.mx6qd parts of versions A & B (v1.0, v1.1), uncomment the following lines. For version C (v1.2), keep commented		
// fine tune SDCLK duty cyc to low - seen to improve measured duty cycle of i.mx6

//DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x8c0, 0x24911492)		
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x8c0, 0x24911492)

// Complete calibration by forced measurement:                  			
DCD_ENTRY_QUAD(39, MX6X_MMDC_P0_BASE + 0x8b8, 0x00000800)	// DDR_PHY_P0_MPMUR0, frc_msr	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x8b8, 0x00000800)	// DDR_PHY_P0_MPMUR0, frc_msr


//=============================================================================			
// Calibration setup end			
//=============================================================================			
			
//MMDC init: 				
DCD_ENTRY_QUAD(40, MX6X_MMDC_P0_BASE + 0x004, 0x00020036)	// MMDC0_MDPDC
DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x008, 0x09444040)	// MMDC0_MDOTC
DCD_ENTRY_QUAD(42, MX6X_MMDC_P0_BASE + 0x00c, 0x54597955)	// MMDC0_MDCFG0
DCD_ENTRY_QUAD(43, MX6X_MMDC_P0_BASE + 0x010, 0xFF328F64)	// MMDC0_MDCFG1
DCD_ENTRY_QUAD(44, MX6X_MMDC_P0_BASE + 0x014, 0x01FF00DB)	// MMDC0_MDCFG2

//MDMISC: RALAT kept to the high level of 5. 			
//MDMISC: consider reducing RALAT if your 528MHz board design allow that. Lower RALAT benefits: 			
//a. better operation at low frequency, for LPDDR2 freq < 100MHz, change RALAT to 3			
//b. Small performence improvment 			
DCD_ENTRY_QUAD(45, MX6X_MMDC_P0_BASE + 0x018, 0x00011740)	// MMDC0_MDMISC	
DCD_ENTRY_QUAD(46, MX6X_MMDC_P0_BASE + 0x01c, 0x00008000)	// MMDC0_MDSCR, set the Configuration request bit during MMDC set up	
DCD_ENTRY_QUAD(47, MX6X_MMDC_P0_BASE + 0x02c, 0x000026D2)	// MMDC0_MDRWD
DCD_ENTRY_QUAD(48, MX6X_MMDC_P0_BASE + 0x030, 0x00591023)	// MMDC0_MDOR
DCD_ENTRY_QUAD(49, MX6X_MMDC_P0_BASE + 0x040, 0x00000017)	// Chan0 CS0_END 	
DCD_ENTRY_QUAD(50, MX6X_MMDC_P0_BASE + 0x000, 0x83190000)	// MMDC0_MDCTL
			
//Mode register writes                 				
DCD_ENTRY_QUAD(51, MX6X_MMDC_P0_BASE + 0x01c, 0x02088032)	// MMDC0_MDSCR, MR2 write, CS0
DCD_ENTRY_QUAD(52, MX6X_MMDC_P0_BASE + 0x01c, 0x00008033)	// MMDC0_MDSCR, MR3 write, CS0	
DCD_ENTRY_QUAD(53, MX6X_MMDC_P0_BASE + 0x01c, 0x00048031)	// MMDC0_MDSCR, MR1 write, CS0
DCD_ENTRY_QUAD(54, MX6X_MMDC_P0_BASE + 0x01c, 0x19408030)	// MMDC0_MDSCR, MR0write, CS0
DCD_ENTRY_QUAD(55, MX6X_MMDC_P0_BASE + 0x01c, 0x04008040)	// MMDC0_MDSCR, ZQ calibration command sent to device on CS0

	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x01c, 0x0208803A)	// MMDC0_MDSCR, MR2 write, CS1
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x01c, 0x0000803B)	// MMDC0_MDSCR, MR3 write, CS1	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x01c, 0x00048039)	// MMDC0_MDSCR, MR1 write, CS1
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x01c, 0x19408038)	// MMDC0_MDSCR, MR0write, CS1	
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x01c, 0x04008048)	// MMDC0_MDSCR, ZQ calibration command sent to device on CS1


DCD_ENTRY_QUAD(56, MX6X_MMDC_P0_BASE + 0x020, 0x00007800)	// MMDC0_MDREF			
DCD_ENTRY_QUAD(57, MX6X_MMDC_P0_BASE + 0x818, 0x00022227)	// DDR_PHY_P0_MPODTCTRL
//DCD_ENTRY_QUAD(41, MX6X_MMDC_P1_BASE + 0x818, 0x00022227)	// DDR_PHY_P1_MPODTCTRL
	
DCD_ENTRY_QUAD(58, MX6X_MMDC_P0_BASE + 0x004, 0x00025576)	// MMDC0_MDPDC now SDCTL power down enabled	
DCD_ENTRY_QUAD(59, MX6X_MMDC_P0_BASE + 0x404, 0x00011006)	// MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached.		
DCD_ENTRY_QUAD(60, MX6X_MMDC_P0_BASE + 0x01c, 0x00000000)	// MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete)

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
